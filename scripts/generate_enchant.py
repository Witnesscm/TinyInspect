import os
from collections import defaultdict

from wago_tools import WagoClient


PRODUCT = "wow"

ITEM_BLACKLIST = {
    35423, 35449, 35426, 35440, 35420, 35422, 35421, 35417,
    35448, 35451, 35419, 35400, 35418, 35428, 35429, 35437,
    35455, 35397, 35459, 35456, 35396, 35462, 35460, 35458,
    35461, 35452, 35424, 35430, 35439, 35443, 35441, 35436,
    35399, 35398, 35729, 35730, 35731, 35728, 35453, 44871,
    50335, 44872, 50336, 44874, 50338, 44873, 50337, 35454,
    68717, 68715, 68716, 68714, 35457, 35427, 35425, 35431,
    35442, 35438, 35432, 37311, 37313, 37312, 168595, 168597,
    44125, 44126, 68815, 77276, 89717, 72070, 108997, 198483,
    238404, 238679, 239079, 239085, 239089, 239094,
}


def main():
    client = WagoClient(PRODUCT)

    # Spell ID -> Spell Name
    spell_name_csv = client.fetch_csv("SpellName", "zhCN")
    spell_name = {int(r["ID"]): r["Name_lang"] for r in spell_name_csv}

    # Item ID -> Item Name
    item_sparse_csv = client.fetch_csv("ItemSparse", "zhCN")
    item_name = {int(r["ID"]): r["Display_lang"] for r in item_sparse_csv}

    spell_enchant_data = defaultdict(list)
    item_enchant_data = defaultdict(list)

    # Effect ID -> Spell ID
    item_effect_csv = client.fetch_csv("ItemEffect")
    item_effect_to_spell = {
        row["ID"]: int(row["SpellID"])
        for row in item_effect_csv
        if row["TriggerType"] == "0"
    }

    # Spell ID -> Item ID
    spell_to_item = defaultdict(list)
    item_x_effect_csv = client.fetch_csv("ItemXItemEffect")
    for row in item_x_effect_csv:
        effect_id = row["ItemEffectID"]
        item_id = int(row["ItemID"])

        if item_id in ITEM_BLACKLIST or item_id not in item_name:
            continue

        spell_id = item_effect_to_spell.get(effect_id)
        if spell_id:
            spell_to_item[spell_id].append(item_id)

    # SpellEffect
    crafting_to_spell = {}
    spell_effect_csv = client.fetch_csv("SpellEffect")
    for row in spell_effect_csv:
        effect = row["Effect"]
        spell_id = int(row["SpellID"])
        effect_value = int(row["EffectMiscValue_0"])

        if spell_id <= 0 or effect_value <= 0:
            continue

        if effect == "53":  # 附魔法术 Enchant ID -> Spell ID
            spell_enchant_data[effect_value].append(spell_id)
            if spell_to_item.get(spell_id):
                item_enchant_data[effect_value].extend(spell_to_item[spell_id])

        elif effect == "301":  # 巨龙时代制造业附魔法术 Crafting ID -> Spell ID
            crafting_to_spell[effect_value] = spell_id

    # Enchant ID -> Item ID & Spell ID
    crafting_data_csv = client.fetch_csv("CraftingDataEnchantQuality")
    for row in crafting_data_csv:
        enchant_id = int(row["SpellItemEnchantmentID"])
        item_id = int(row["ItemID"])
        spell_id = crafting_to_spell.get(int(row["CraftingDataID"]))

        if item_id > 0 and item_id not in item_enchant_data[enchant_id]:
            item_enchant_data[enchant_id].append(item_id)

        if spell_id and spell_id not in spell_enchant_data[enchant_id]:
            spell_enchant_data[enchant_id].append(spell_id)

    # Item ID -> Item Crafting Quality
    item_csv = client.fetch_csv("Item")
    item_crafting_quality = {
        int(r["ID"]): int(r["CraftingQualityID"])
        for r in item_csv
        if int(r["CraftingQualityID"]) > 0
    }

    script_dir = os.path.dirname(os.path.abspath(__file__))
    output_file = os.path.join(script_dir, "ItemEnchant.lua")

    with open(output_file, "w", encoding="utf-8") as f:
        f.write("-- Generated by script from https://wago.tools/db2\n")
        f.write(f"-- Last Updated: {client.version}\n")

        f.write("local EnchantItemDB = {\n")
        for key in sorted(item_enchant_data.keys()):
            for idx, item_id in enumerate(item_enchant_data[key]):
                quality = item_crafting_quality.get(item_id)
                quality_text = f" ({quality}星)" if quality else ""
                comment_prefix = "" if idx == 0 else "-- "
                f.write(
                    f"    {comment_prefix}[{key}] = {item_id}, "
                    f"-- {item_name[item_id]}{quality_text}\n"
                )
        f.write("}\n\n")

        f.write("local EnchantSpellDB = {\n")
        for key in sorted(spell_enchant_data.keys()):
            for idx, spell_id in enumerate(spell_enchant_data[key]):
                comment_prefix = "" if idx == 0 else "-- "
                f.write(
                    f"    {comment_prefix}[{key}] = {spell_id}, "
                    f"-- {spell_name[spell_id]}\n"
                )
        f.write("}\n")


if __name__ == "__main__":
    main()
